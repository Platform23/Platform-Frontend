name: Continuous Integration-Continuous Deployment

on:
  push:
    branches:
      - main  

jobs:
 build:
    runs-on: ubuntu-24.04
    name: Continuous Integration
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20' 

    - name: Install dependencies
      run: npm ci

    - name: Build React app
      run: npm run build
          
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: platformht/frontend-image:latest

 deploy:
    runs-on: ubuntu-24.04
    name: Continuous Deployment
    needs: [build]
    steps:
      - name: Deploy to VPS using ssh
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /home/platform

            # Pull the latest image for frontend
            docker-compose pull frontend
            
            # Stop and remove the existing frontend container
            docker-compose stop frontend
            docker-compose rm -f frontend
            
            # Prune unused Docker networks (optional, if needed)
            docker network prune -f
            
            # Rebuild and bring up the frontend service
            docker-compose up -d --no-deps --build frontend
            
            # Prune unused Docker images (optional, if needed)
            docker image prune -f
            
            # Force Traefik to reload its configuration
            docker-compose kill -s SIGHUP traefik
            
            # Wait for the frontend service to become healthy
            timeout 300 bash -c 'until docker-compose ps | grep frontend | grep -q "(healthy)"; do sleep 5; done'
            
            # Check if the frontend service is healthy
            if [ $? -ne 0 ]; then
              echo "Frontend service did not become healthy within timeout period."
              # If the frontend is not healthy, bring down all services and restart
              docker-compose down
              docker-compose up -d
            fi
